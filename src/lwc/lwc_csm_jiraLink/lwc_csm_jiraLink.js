import { LightningElement, api, track, wire } from 'lwc';
import { RefreshEvent } from 'lightning/refresh';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import { getRecord, createRecord, updateRecord, deleteRecord } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';
import getJiraLink from '@salesforce/apex/CNT_CSM_JiraLink.getJiraLink';
import getJiraBaseUrls from '@salesforce/apex/CNT_CSM_JiraLink.getJiraBaseUrls';
import saveJiraCommentFromCSM from '@salesforce/apex/CNT_CSM_JiraLink.saveJiraCommentFromCSM';
import getCalloutResponseContents from '@salesforce/apex/CNT_CSM_JiraLink.getCalloutResponseContents';
import postCalloutResponseContents from '@salesforce/apex/CNT_CSM_JiraLink.postCalloutResponseContents';
import postAttachmentCalloutResponseContents from '@salesforce/apex/CNT_CSM_JiraLink.postAttachmentCalloutResponseContents';
// import getAttachmentCalloutResponseContents from '@salesforce/apex/CNT_CSM_JiraLink.getAttachmentCalloutResponseContents';
import searchUsers from '@salesforce/apex/CNT_CSM_JiraLink.searchUsers';
import upsertJiraLinkComments from '@salesforce/apex/CNT_CSM_JiraLink.upsertJiraLinkComments';
import insertCaseComments from '@salesforce/apex/CNT_CSM_JiraLink.insertCaseComments';
import JIRALINK_OBJECT from '@salesforce/schema/CSM_QI_JiraLink__c';
import ID_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Id';
import JIRA_KEY_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.jira_key__c';
import JIRA_BASE_URL_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.jira_base_url__c';
import SUMMARY_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.summary__c';
import CASE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.case_recordId__c';
import ISSUE_TYPE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.issue_type__c';
import SPRINT_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Sprint__c';
import PRIORITY_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.priority__c';
import STATUS_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.status__c';
import ASSIGNEE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.assignee__c';
import REPORTER_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.reporter__c';
import DESCRIPTION_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.description__c';
import FIXVERSIONS_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.fixVersions__c';
import COUNTRY_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.country__c';
import CUSTOMER_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.customer__c';
import PSA_PROJECT_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.PSA_Project__c';
import CSM_USER_REPORTER_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.CSM_User_Reporter__c';
import DUE_DATE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.due_date__c';
import CREATED_DATE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Jira_Created_Date__c';
import UPDATED_DATE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Jira_Updated_Date__c';
import SPRINT_TIME_STAMP_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Sprint_Time_Stamp__c';
import FOUND_DURING_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Found_During__c';
import ENVIRONMENT_TYPE_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Environment_Type__c';
import EPIC_NAME_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Epic_Name__c';
import EPIC_LINK_FIELD from '@salesforce/schema/CSM_QI_JiraLink__c.Epic_Link__c';
import CASE_ID_FIELD from '@salesforce/schema/Case.Id';
import CASENUMBER_FIELD from '@salesforce/schema/Case.CaseNumber';
import SUBJECT_FIELD from '@salesforce/schema/Case.Subject';
import CASE_DESCRIPTION_FIELD from '@salesforce/schema/Case.Description';
import PSACODE_FIELD from '@salesforce/schema/Case.PSACode__c';
import ACCOUNTCOUNTRY_FIELD from '@salesforce/schema/Case.Account.AccountCountry__c';
import ACCOUNTNAME_FIELD from '@salesforce/schema/Case.Account.Name';
import CASE_JIRA_ISSUE_FIELD from '@salesforce/schema/Case.Jira_Issue__c';
import CASE_SPRINT_FIELD from '@salesforce/schema/Case.Sprint__c';
import CASE_STATUS_FIELD from '@salesforce/schema/Case.Status';
import BODY_FIELD from '@salesforce/schema/CSM_QI_JiraLinkComment__c.Body__c';
import hasJIRAReadOnlyPermission from '@salesforce/customPermission/CSM_JIRA_Read_Only';
import USER_ID from '@salesforce/user/Id';
import NAME_FIELD from '@salesforce/schema/User.Name';

const COM_SIGNATURE = '<p>&nbsp;</p><p><i>This message has been generated by the generic Jira Service User, please do not reply to this comment as the mailbox isn\'t hanlde.</i></p><p><i>If you want to communicate with Jira user please use the Jira component in the right panel.</i></p>';
const JIRA_USER_NAME = 'Salesforce4JIRA';
export default class Lwc_csm_jiraLink extends LightningElement {
    @track canEdit = false;
    isJiraFormModalOpen = false;
    isJiraCommentsModalOpen = false;
    formError = false;
    userErrors = [];
    updateJiraLinks = true;

    jiraServiceUserId = '0056A000002atA5QAI';

    typeJiraLinkOptions = [
        { 'label': 'Link with an existing JIRA issue', 'value': '1' },
        { 'label': 'Link with a new JIRA issue', 'value': '3' },
    ];

    jiraAttachmentColumns = [
        { label: 'File Name', fieldName: 'content', type: 'url', typeAttributes: { label: { fieldName: 'filename' } }, sortable: true },
        { label: 'Author', fieldName: 'author', type: 'text', sortable: true },
        { label: 'Created date', fieldName: 'created', type: 'date', sortable: true },];

    typeJiralink = '1';
    linkWithExisting = true;


    @api recordId;
    showSpinner;
    currentJiraLink = {};
    jiraLinks = [];

    jiraBaseUrl;
    jiraBaseUrls;

    jiraIssueKey;

    csm_user = '';

    newJiraIssue = {
        fields: {
            project: {
                key: ''
            },
            issuetype: {
                id: ''
            },
            summary: '',
            priority: {
                id: ''
            },
            description: '',
            //customer
            customfield_14511: {
                id: ''
            },
            //country
            customfield_14510: {
                id: ''
            },
            //PSAProject
            customfield_16646: '',
            assignee: {
                name: ''
            },
            //Found During
            customfield_10601: {
                id: ''
            },
            //Environment Type
            customfield_10605: {
                id: ''
            },
            //Epic Link
            customfield_11240: ''
        }
    }

    account = {
        name: '',
        country: ''
    }

    case = {
        caseNumber: '',
        PSACode: '',
        jiraIssue: '',
        sprint: '',
        status: ''
    }

    @track jiraProjectsOptions = [];
    jiraProjects = [];
    @track jiraProjectSelected;

    @track jiraIssueTypesOptions = [];
    jiraIssueTypes = [];

    @track jiraPrioritiesOptions = [];
    jiraPriorities = [];

    @track jiraCountriesOptions = [];
    jiraCountries = [];

    @track jiraCustomersOptions = [];
    jiraCustomers = [];

    @track jiraFoundDuringOptions = [];

    @track jiraEnvironmentTypeOptions = [];

    jiraTransitions = [];
    jiraComments = [];
    jiraAttachments = [];

    jiraAssignableUsers = [];

    newJiraComment = {
        body: ''
    };
    @track currentUserName;

    @wire(getRecord, { recordId: USER_ID, fields: [NAME_FIELD] })
    currentUserInfo({ error, data }) {
        if (data) {
            this.currentUserName = data.fields.Name.value;
        } else if (error) {
            console.log(error);
        }
    }

    connectedCallback() {
        this.init();
    }
    openJiraFormModal(event) {
        this.jiraBaseUrl = this.jiraBaseUrls[0].value;
        this.isJiraFormModalOpen = true;
    }

    closeJiraFormModal() {
        this.formError = false;
        this.jiraBaseUrl = ''
        this.jiraIssueKey = '';
        this.csm_user = '';
        this.typeJiralink = '1';
        this.linkWithExisting = true;
        this.isJiraFormModalOpen = false;
    }

    openJiraCommentsModal(event) {
        this.isJiraCommentsModalOpen = true;
        this.getJiraTransitions(this.currentJiraLink.jira_base_url__c, this.currentJiraLink.jira_key__c);
        this.getJiraComments(this.currentJiraLink);
        this.getJiraAttachments(this.currentJiraLink.jira_base_url__c, this.currentJiraLink.jira_key__c);
    }

    closeJiraCommentsModal() {
        this.formError = false;
        this.isJiraCommentsModalOpen = false;
        this.newJiraComment.body = '';
    }

    init() {
        this.showSpinner = true;
        this.jiraBaseUrls = [];
        this.currentJiraLink = {};
        this.jiraLinks = [];
        getJiraBaseUrls()
            .then(result => {
                for (let i = 0; i < result.length; i++) {
                    this.jiraBaseUrls.push({
                        label: result[i],
                        value: result[i]
                    });
                }
                this.showSpinner = false;

            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    @wire(getRecord, {
        recordId: '$recordId',
        fields: [CASENUMBER_FIELD, SUBJECT_FIELD, CASE_DESCRIPTION_FIELD, PSACODE_FIELD, ACCOUNTCOUNTRY_FIELD, ACCOUNTNAME_FIELD, CASE_JIRA_ISSUE_FIELD, CASE_SPRINT_FIELD, CASE_STATUS_FIELD]
    }) wireCase({ error, data }) {
        if (error) {
            console.log(error);
        } else if (data) {
            this.newJiraIssue.fields.summary = data.fields.Subject.value;
            this.newJiraIssue.fields.description = data.fields.Description.value;
            this.case.caseNumber = data.fields.CaseNumber.value;
            this.case.PSACode = data.fields.PSACode__c.value;
            this.case.jiraIssue = data.fields.Jira_Issue__c.value;
            this.case.sprint = data.fields.Sprint__c.value;
            this.case.status = data.fields.Status.value;
            if (data.fields.Account.value) {
                this.account.name = data.fields.Account.value.fields.Name.value;
                this.account.country = data.fields.Account.value.fields.AccountCountry__c.displayValue;
            }

            console.log('hasJIRAReadOnlyPermission', hasJIRAReadOnlyPermission);
            if (this.case.status !== 'Closed' &&
                this.case.status !== 'Canceled' &&
                this.case.status !== 'Abandoned' &&
                hasJIRAReadOnlyPermission !== true)
                this.canEdit = true;
            else this.canEdit = false;
        }
        this.showSpinner = false;
    }

    @wire(getJiraLink, { recordId: '$recordId' })
    wiredGetJiraLinks(result) {
        this.wiredJiraLinksResults = result;
        const { error, data } = result;
        if (data) {
            this.jiraLinks = [...data].sort((a, b) => b.CreatedDate - a.CreatedDate);

            if (this.currentJiraLink) {
                this.currentJiraLink = this.getCurrentJiraLink(this.currentJiraLink.Id);
            }

            if (this.updateJiraLinks) {
                this.refreshJiraLinks();
            } else {
                this.refreshCase();
            }
        } else if (error) {
            this.error = error;
            console.error('Error fetching Jira Links:', error);
        }

        this.showSpinner = false;
    }


    refreshCase() {
        let jiraKeys = [];
        let jiraSprints = [];
        const jiraPattern = /\([^\)]+-[^\)]+\)/;
        for (let i = 0; i < this.jiraLinks.length; i++) {
            let jiraKey = this.jiraLinks[i].jira_key__c;
            let sprint = this.jiraLinks[i].Sprint__c;
            if (jiraKey) {
                jiraKeys.push(jiraKey);
            }
            if (sprint) {
                jiraSprints.push(`${sprint} (${jiraKey})`);
            }
        }   
        this.case.jiraIssue = jiraKeys.join(';');
        let currentSprints = this.case.sprint
            ? this.case.sprint.split(';').map(sprint => sprint.trim())
            : [];
    
        let nonKeySprints = currentSprints.filter(
            sprintEntry => !jiraPattern.test(sprintEntry)
        );
        this.case.sprint = [
            ...nonKeySprints,
            ...jiraSprints
        ].join(';');
    
        if (this.canEdit) {
            this.updateCase();
        }
    }
    

    refreshJiraLinks() {
        this.updateJiraLinks = false;
        for (let i = 0; i < this.jiraLinks.length; i++) {
            this.refreshAndUpdateJiraIssue(this.jiraLinks[i]);
            this.getJiraComments(this.jiraLinks[i]);
        }
    }

    handleCreateNewJiraCommentClick() {
        this.formError = false;
        if (!this.validJiraForm()) {
            this.formError = true;
            return;
        }
        this.newJiraComment.body = 'CSM Comment ' + this.case.caseNumber + ', *' + this.currentUserName + '*:\n' + this.newJiraComment.body;
        this.createJiraComments(this.currentJiraLink, this.newJiraComment);
    }

    async handleCreateJiraLinkClick() {
        this.formError = false;
        if (!this.validJiraForm()) {
            this.formError = true;
            return;
        }
        if (this.linkWithExisting) {
            const resp = await this.getJiraIssue(this.jiraBaseUrl, this.jiraIssueKey);
            if (resp !== undefined) {
                const fields = await this.getFields(resp);
                this.createJiraLink(fields);
            }
        } else {
            const r = await this.createJiraIssue(this.jiraBaseUrl);
            if (r) {
                const resp = await this.getJiraIssue(this.jiraBaseUrl, this.jiraIssueKey);
                if (resp !== undefined) {
                    const fields = await this.getFields(resp);
                    this.createJiraLink(fields);
                }
            }
        }
    }


    validJiraForm() {
        const allValid = [...this.template.querySelectorAll('lightning-input, lightning-textarea')]
            .reduce((validSoFar, inputFields) => {
                inputFields.reportValidity();
                return validSoFar && inputFields.checkValidity();
            }, true);
        return allValid;
    }

    applyTransition(event) {
        const transitionId = event.target.value;
        const data = {
            update: {
                comment: [
                    {
                        add: {
                            body: 'Comment added when CSM update JIRA status'
                        }
                    }
                ]
            },
            fields: {},
            transition: {
                id: transitionId
            }
        };
        this.updateJiraIssueStatus(this.currentJiraLink.jira_base_url__c, this.currentJiraLink.jira_key__c, JSON.stringify(data));
    }

    updateJiraIssueStatus(url, key, data) {
        this.showSpinner = true;
        postCalloutResponseContents({
            url: url + '/rest/api/2/issue/' + key + '/transitions',
            JSONString: data
        })
            .then(result => {
                if (result[0] == '204') {
                    this.refreshAndUpdateJiraIssue(this.currentJiraLink);
                    this.getJiraTransitions(this.currentJiraLink.jira_base_url__c, this.currentJiraLink.jira_key__c);
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'JIRA Link Component',
                            message: 'The status was updated.',
                            variant: 'success',
                        })
                    );
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });

    }

    async refreshAndUpdateJiraIssue(jira) {
        const resp = await this.getJiraIssue(jira.jira_base_url__c, jira.jira_key__c);
        if (resp !== undefined) {
            const fields = await this.getFields(resp);
            fields[ID_FIELD.fieldApiName] = jira.Id;
            this.updateJiraLink(fields);
            if (jira.status__c != fields[STATUS_FIELD.fieldApiName]) {
                var body = '<p>JIRA <a href="' + jira.jira_base_url__c + '/browse/' + jira.jira_key__c + '" target="_blank">' + jira.jira_key__c + '</a> status was updated with the value <b>' + fields[STATUS_FIELD.fieldApiName] + '</b>.</p>';
                var caseComment = {};
                caseComment.ParentId = this.recordId;
                caseComment.Body = body;
                caseComment.IsRichText = true;
                caseComment.CreatedById = this.jiraServiceUserId;
                this.createCaseComments([caseComment]);
            }
        }
    }

    async getJiraIssue(url, key) {
        console.log('url', url + '/rest/api/2/issue/' + key + '?expand=changelog');
        this.showSpinner = true;
        return getCalloutResponseContents({
            url: url + '/rest/api/2/issue/' + key + '?expand=changelog'
        })
            .then(result => {
                if (result[0] == '200') {
                    var value = this.eliminateInvalidCharacter(result[1]);
                    return value;
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log('Error', error);
                this.showSpinner = false;
            });
    }

    async createJiraIssue(url) {
        this.showSpinner = true;
        let j = JSON.parse(JSON.stringify(this.newJiraIssue));
        //j.fields.description = this.escape(j.fields.description);
        //j.fields.summary = this.escape(j.fields.summary);
        if (j.fields.priority.id === '') {
            delete j.fields.priority;
        }
        if (j.fields.customfield_14510.id === '') {
            delete j.fields.customfield_14510;
        }
        if (j.fields.customfield_14511.id === '') {
            delete j.fields.customfield_14511;
        }
        if (j.fields.customfield_16646 === '') {
            delete j.fields.customfield_16646;
        }
        if (j.fields.assignee.name === '') {
            delete j.fields.assignee;
        }
        if (j.fields.customfield_10601.id === '') {
            delete j.fields.customfield_10601;
        }
        if (j.fields.customfield_10605.id === '') {
            delete j.fields.customfield_10605;
        }
        if (j.fields.customfield_11240 === '') {
            delete j.fields.customfield_11240;
        }

        let JSONString = JSON.stringify(j);
        return postCalloutResponseContents({
            url: url + '/rest/api/2/issue/',
            JSONString: JSONString
        })
            .then(result => {
                this.showSpinner = false;
                if (result[0] == '201') {
                    this.jiraIssueKey = JSON.parse(result[1]).key;
                    return true;
                } else {
                    let message = '';
                    let res = JSON.parse(result[1]);
                    if (res.errorMessages.length > 0)
                        res.errorMessages.forEach(msg => {
                            message += msg + '\n';
                        });

                    if (Object.keys(res.errors).length > 0)
                        Object.entries(res.errors).forEach(([key, value]) => {
                            message += value + '\n';
                        });

                    if (message.indexOf('required'))
                        message += 'The JIRA project you\'re trying to create an issue for requires mandatory fields either not completed below or not available in CSM. Please complete these required fields in CSM or add them in JIRA then link to the new issue.';

                    this.dispatchEvent(
                        new ShowToastEvent({
                            mode: 'sticky',
                            title: 'ERROR With JIRA Link Component',
                            message: message,
                            variant: 'error',
                        })
                    );
                    return false;
                }
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
                return false;
            });
    }

    getJiraProjects() {
        this.jiraProjects = [];
        this.jiraProjectsOptions = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: this.jiraBaseUrl + '/rest/api/2/project'
        })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraProjects = JSON.parse(result[1]);
                    for (let i = 0; i < this.jiraProjects.length; i++) {
                        this.jiraProjectsOptions.push({
                            label: this.jiraProjects[i].name,
                            value: i.toString()
                        });
                    }
                    this.jiraProjectSelected = this.jiraProjectsOptions[0].value;
                    this.newJiraIssue.fields.project.key = this.jiraProjects[this.jiraProjectSelected].key;
                    this.jiraProjectsOptions = JSON.parse(JSON.stringify(this.jiraProjectsOptions));
                    this.getJiraIssueTypes();
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraPriorities() {
        this.jiraPrioritiesOptions = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: this.jiraBaseUrl + '/rest/api/2/priority'
        })
            .then(result => {
                if (result[0] == '200') {
                    var jiraPrioritiesResult = JSON.parse("{\"priorities\":" + result[1] + "}");
                    this.jiraPriorities = jiraPrioritiesResult.priorities.reverse();
                    for (let i = 0; i < this.jiraPriorities.length; i++) {
                        this.jiraPrioritiesOptions.push({
                            label: this.jiraPriorities[i].name,
                            value: this.jiraPriorities[i].id
                        });
                    }
                    this.newJiraIssue.fields.priority.id = this.jiraPrioritiesOptions[0].value;
                    this.jiraPrioritiesOptions = JSON.parse(JSON.stringify(this.jiraPrioritiesOptions));
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraIssueTypes() {
        const key = this.newJiraIssue.fields.project.key;
        const url = `${this.jiraBaseUrl}/rest/api/2/issue/createmeta/${key}/issuetypes`;
        this.jiraIssueTypesOptions = [];
        this.showSpinner = true;

        getCalloutResponseContents({ url })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraIssueTypes = JSON.parse(result[1]).values;
                    this.jiraIssueTypesOptions = this.jiraIssueTypes.map(t => ({
                        label: t.name,
                        value: t.id
                    }));
                    this.newJiraIssue.fields.issuetype.id = this.jiraIssueTypesOptions[0].value;
                    this.jiraIssueTypesOptions = JSON.parse(JSON.stringify(this.jiraIssueTypesOptions));
                    this.getJiraAvailableFields();
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraAvailableFields() {
        const priorityElement = this.template.querySelector('[data-id="priority"]');
        const customerElement = this.template.querySelector('[data-id="customer"]');
        const countryElement = this.template.querySelector('[data-id="country"]');
        const PSAProjectElement = this.template.querySelector('[data-id="PSAProject"]');
        const assigneeElement = this.template.querySelector('[data-id="assignee"]');

        const foundDuringElement = this.template.querySelector('[data-id="foundDuring"]');
        const environmentTypeElement = this.template.querySelector('[data-id="environmentType"]');

        const url = `${this.jiraBaseUrl}/rest/api/2/issue/createmeta/${this.newJiraIssue.fields.project.key}/issuetypes/${this.newJiraIssue.fields.issuetype.id}`;
        console.log('meta', url);
        this.jiraCustomersOptions = [];
        this.jiraCountriesOptions = [];
        this.jiraPrioritiesOptions = [];
        this.jiraFoundDuringOptions = [];
        this.jiraEnvironmentTypeOptions = [];
        this.showSpinner = true;

        getCalloutResponseContents({ url })
            .then(result => {
                if (result[0] == '200') {
                    const createmeta = JSON.parse(result[1]).values;

                    const foundDuringField = createmeta.find(field => field.fieldId === "customfield_10601");
                    if (foundDuringField) {
                        foundDuringElement.classList.remove('slds-hide');
                        const jiraFoundDuring = foundDuringField.allowedValues;
                        this.jiraFoundDuringOptions = jiraFoundDuring.map(v => ({
                            label: v.value,
                            value: v.id
                        }));
                        this.newJiraIssue.fields.customfield_10601.id = this.jiraFoundDuringOptions[0].value;
                    } else {
                        foundDuringElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.customfield_10601.id = '';
                    }

                    const environmentTypeField = createmeta.find(field => field.fieldId === "customfield_10605");
                    if (environmentTypeField) {
                        environmentTypeElement.classList.remove('slds-hide');
                        const jiraEnvironmentType = environmentTypeField.allowedValues;
                        this.jiraEnvironmentTypeOptions = jiraEnvironmentType.map(v => ({
                            label: v.value,
                            value: v.id
                        }));
                        this.newJiraIssue.fields.customfield_10605.id = this.jiraEnvironmentTypeOptions[0].value;
                    } else {
                        environmentTypeElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.customfield_10605.id = '';
                    }

                    const priorityField = createmeta.find(field => field.fieldId === "priority");
                    if (priorityField) {
                        priorityElement.classList.remove('slds-hide');
                        this.jiraPriorities = priorityField.allowedValues.reverse();
                        this.jiraPrioritiesOptions = this.jiraPriorities.map(p => ({
                            label: p.name,
                            value: p.id
                        }));
                        this.newJiraIssue.fields.priority.id = this.jiraPrioritiesOptions[0].value;
                    } else {
                        priorityElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.priority.id = '';
                    }

                    const customerField = createmeta.find(field => field.fieldId === "customfield_14511");
                    if (customerField) {
                        customerElement.classList.remove('slds-hide');
                        this.jiraCustomers = customerField.allowedValues;
                        this.jiraCustomersOptions = this.jiraCustomers.map(c => ({
                            label: c.value,
                            value: c.id
                        }));
                        const accountName = this.account.name.toUpperCase();
                        const customer = this.jiraCustomersOptions.find(c => c.label.toUpperCase() === accountName || c.label.toUpperCase() === accountName.substring(0, accountName.indexOf('[') - 1).toUpperCase());
                        if (customer) {
                            this.newJiraIssue.fields.customfield_14511.id = customer.value;
                        } else {
                            this.newJiraIssue.fields.customfield_14511.id = '';
                        }
                    } else {
                        customerElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.customfield_14511.id = '';
                    }

                    const countryField = createmeta.find(field => field.fieldId === "customfield_14510");
                    if (countryField) {
                        countryElement.classList.remove('slds-hide');
                        this.jiraCountries = countryField.allowedValues;
                        this.jiraCountriesOptions = this.jiraCountries.map(c => ({
                            label: c.value,
                            value: c.id
                        }));
                        const accountCountry = this.account.country.toUpperCase();
                        const country = this.jiraCountriesOptions.find(c => c.label.toUpperCase() === accountCountry);
                        if (country) {
                            this.newJiraIssue.fields.customfield_14510.id = country.value;
                        } else {
                            this.newJiraIssue.fields.customfield_14510.id = '';
                        }
                    } else {
                        countryElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.customfield_14510.id = '';
                    }
                    const PSAProjectField = createmeta.find(field => field.fieldId === "customfield_16646");
                    if (PSAProjectField) {
                        PSAProjectElement.classList.remove('slds-hide');
                        this.newJiraIssue.fields.customfield_16646 = this.case.PSACode;
                    } else {
                        PSAProjectElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.customfield_16646 = '';
                    }

                    const assigneeField = createmeta.find(field => field.fieldId === "assignee");
                    if (assigneeField) {
                        assigneeElement.classList.remove('slds-hide');
                        //this.getJiraAssignableUsers(this.jiraBaseUrl, this.newJiraIssue.fields.project.key);
                    } else {
                        assigneeElement.classList.add('slds-hide');
                        this.newJiraIssue.fields.assignee.name = '';
                    }
                    const epicField = createmeta.find(field => field.fieldId === "customfield_11240");
                    if (!epicField) {
                        this.newJiraIssue.fields.customfield_11240 = '';
                    }

                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraAssignableUsers(url, key) {
        console.log(url + '/rest/api/2/user/assignable/search?project=' + key);
        this.jiraAssignableUsers = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: url + '/rest/api/2/user/assignable/search?project=' + key
        })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraAssignableUsers = JSON.parse(result[1]);
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraTransitions(url, key) {
        console.log(url + '/rest/api/2/issue/' + key + '/transitions?expand=transitions.fields');
        this.jiraTransitions = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: url + '/rest/api/2/issue/' + key + '/transitions?expand=transitions.fields'
        })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraTransitions = JSON.parse(result[1]).transitions;
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraAttachments(url, key) {
        console.log(url + '/rest/api/2/issue/' + key + '?fields=attachment');
        this.jiraAttachments = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: url + '/rest/api/2/issue/' + key + '?fields=attachment'
        })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraAttachments = JSON.parse(result[1]).fields.attachment;
                    for (var i = 0; i < this.jiraAttachments.length; i++) {
                        this.jiraAttachments[i].author = this.jiraAttachments[i].author.displayName;
                    }
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    getJiraComments(jiraLink) {
        console.log(jiraLink.jira_base_url__c + '/rest/api/2/issue/' + jiraLink.jira_key__c + '/comment');
        this.jiraComments = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: jiraLink.jira_base_url__c + '/rest/api/2/issue/' + jiraLink.jira_key__c + '/comment'
        })
            .then(result => {
                if (result[0] == '200') {
                    this.jiraComments = JSON.parse(this.eliminateInvalidCharacter(result[1]).replace(/24x24/g, "m24x24")).comments;
                    this.jiraComments.forEach(comment => {
                        comment.updated = Date.parse(comment.updated);
                        comment.body = this.escapeHtml(comment.body);
                        comment.body = comment.body.replace(/\*(.*?)\*/g, '<b>$1</b>');
                        comment.body = this.replaceLineBreaksWithParagraphs(comment.body);
                    });
                    this.jiraComments = this.jiraComments.slice().sort(function (a, b) { return (a.created < b.created) ? 1 : ((b.created < a.created) ? -1 : 0); });
                    this.upsertJiraLinkComments(this.jiraComments, jiraLink);
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    createJiraComments(jiraLink, data) {
        const JSONString = JSON.stringify(data);
        console.log(jiraLink.jira_base_url__c + '/rest/api/2/issue/' + jiraLink.jira_key__c + '/comment');
        this.showSpinner = true;
        postCalloutResponseContents({
            url: jiraLink.jira_base_url__c + '/rest/api/2/issue/' + jiraLink.jira_key__c + '/comment',
            JSONString: JSONString
        })
            .then(result => {
                if (result[0] == '201') {
                    this.getJiraComments(jiraLink);
                    const jiraComment = JSON.parse(result[1]);
                    saveJiraCommentFromCSM({
                        jiraCommentId: jiraComment.id,
                        jiraLinkId: jiraLink.Id
                    })
                        .then(result => {
                            this.showSpinner = false;
                            this.dispatchEvent(
                                new ShowToastEvent({
                                    title: 'JIRA Link Component',
                                    message: 'The comment was saved.',
                                    variant: 'success',
                                })
                            );
                            this.newJiraComment.body = '';
                            this.showSpinner = false;
                        })
                        .catch(error => {
                            console.log(error);
                            this.showSpinner = false;
                        });
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                    this.showSpinner = false;
                }
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    createJiraAttachments(url, key, documentId) {
        console.log(url + '/rest/api/2/issue/' + key + '/attachments');
        this.showSpinner = true;
        postAttachmentCalloutResponseContents({
            url: url + '/rest/api/2/issue/' + key + '/attachments',
            "contentDocumentId": documentId
        })
            .then(result => {
                if (result[0] == '200') {
                    this.showSpinner = false;
                    deleteRecord(documentId);
                    this.getJiraAttachments(url, key);

                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }

            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    createJiraLink(fields) {
        this.showSpinner = true;
        const recordInput = { apiName: JIRALINK_OBJECT.objectApiName, fields };
        createRecord(recordInput)
            .then(jiraLink => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'JIRA Link Component',
                        message: 'JIRA linked',
                        variant: 'success',
                    })
                );
                refreshApex(this.wiredJiraLinksResults);
                setTimeout(() => {

                    this.template.querySelector('lightning-tabset').activeTabValue = jiraLink.id;
                    this.refreshJiraLinks();
                }, 2000);
                /*
                this.case.jiraIssue = (this.case.jiraIssue !== null) ? this.case.jiraIssue + ';' + jiraLink.fields.jira_key__c.value : jiraLink.fields.jira_key__c.value;
                if (this.canEdit)
                    this.updateCase();
                */
                this.showSpinner = false;
                this.closeJiraFormModal();
            })
            .catch(error => {
                console.error(JSON.stringify(error));
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'ERROR With JIRA Link Component',
                        message: error.body.message,
                        variant: 'error',
                    })
                );
                this.showSpinner = false;
            });
    }

    updateJiraLink(fields) {
        this.showSpinner = true;
        const recordInput = { fields };
        updateRecord(recordInput)
            .then(() => {
                refreshApex(this.wiredJiraLinksResults);
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error.body.message);
                this.showSpinner = false;
            });
    }

    deleteJiraLink(event) {
        this.showSpinner = true;
        deleteRecord(this.currentJiraLink.Id)
            .then(() => {
                /*
                let jiraIssueArr = this.case.jiraIssue.split(';');
                jiraIssueArr.splice(jiraIssueArr.indexOf(this.currentJiraLink.jira_key__c), 1);
                this.case.jiraIssue = jiraIssueArr.join(';');
                if (this.canEdit)
                    this.updateCase();
                */
                refreshApex(this.wiredJiraLinksResults);
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'JIRA Link Component',
                        message: 'Record deleted',
                        variant: 'success'
                    })
                );
                this.showSpinner = false;
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'ERROR With JIRA Link Component',
                        message: error.body.message,
                        variant: 'error'
                    })
                );
                this.showSpinner = false;
            });
    }

    updateCase() {
        this.showSpinner = true;
        const fields = {};
        fields[CASE_ID_FIELD.fieldApiName] = this.recordId;
        fields[CASE_JIRA_ISSUE_FIELD.fieldApiName] = this.case.jiraIssue;
        fields[CASE_SPRINT_FIELD.fieldApiName] = this.case.sprint;
        const recordInput = { fields };
        updateRecord(recordInput)
            .then(() => {
                this.showSpinner = false;
            })
            .catch(error => {
                this.showSpinner = false;
                console.log('Error to Update Case', JSON.stringify(error));
            });
    }

    commentBodyFieldLength;
    @wire(getObjectInfo, { objectApiName: BODY_FIELD.objectApiName })
    jiraLinkCommentsInfo({ data, error }) {
        if (data) {
            const commentBodyMetadata = data.fields[BODY_FIELD.fieldApiName];
            this.commentBodyFieldLength = commentBodyMetadata.length
        }
    }

    async upsertJiraLinkComments(jiraComments, jiraLink) {
        var jiraLinkComments = [];
        for (var i = 0; i < jiraComments.length; i++) {
            var jiraLinkComment = {};
            jiraComments[i].body = this.removeInvalidImg(jiraComments[i].body);
            if (jiraComments[i].body < this.commentBodyFieldLength) {
                jiraLinkComment.body = jiraComments[i].body;
            } else {
                jiraLinkComment.body = jiraComments[i].body.substring(0, this.commentBodyFieldLength - 1);
            }
            if (jiraComments[i].visibility) {
                jiraLinkComment.restricted = true;
            } else {
                jiraLinkComment.restricted = false;
            }
            jiraLinkComment.id = jiraComments[i].id;
            jiraLinkComment.created = jiraComments[i].created;
            jiraLinkComment.updated = new Date(jiraComments[i].updated);
            jiraLinkComment.jiraLinkId = jiraLink.Id;
            jiraLinkComment.author = jiraComments[i].author.displayName;
            jiraLinkComment.updateAuthor = jiraComments[i].updateAuthor.displayName;
            jiraLinkComments.push(jiraLinkComment);
        }
        upsertJiraLinkComments({
            caseId: this.recordId,
            jsonJiraComments: JSON.stringify(jiraLinkComments)
        })
            .then(result => {
                var newJiraComments = result;
                var caseComments = [];
                for (var i = 0; i < newJiraComments.length; i++) {
                    if (newJiraComments[i].Author__c !== JIRA_USER_NAME) {
                        var caseComment = {};
                        var body = '<p>JIRA comment <a href="' + newJiraComments[i].JiraLink__r.jira_base_url__c + '/browse/' + newJiraComments[i].JiraLink__r.jira_key__c + '" target="_blank">' + newJiraComments[i].JiraLink__r.jira_key__c + '</a>,  <b>' + newJiraComments[i].Author__c + '</b>: </p>';
                        body += newJiraComments[i].Body__c;
                        caseComment.ParentId = this.recordId;
                        caseComment.Body = body.substring(0,9000);
                        caseComment.IsRichText = true;
                        caseComment.CreatedById = this.jiraServiceUserId;
                        caseComment.CreatedDate = newJiraComments[i].JiraCommentCreatedDate__c;
                        console.log(caseComment.Body);
                        caseComments.push(caseComment);
                    }
                }
                if (caseComments.length > 0) {
                    this.createCaseComments(caseComments);
                }

            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });

    }

    removeInvalidImg(inputString) {
        const imagePattern = /<img[^>]+src="data:image\/[^;]+;base64,[^"]+"[^>]*>/g;
        let resultString = '';
        let lastEnd = 0;
        let match;
        while ((match = imagePattern.exec(inputString)) !== null) {
            resultString += inputString.substring(lastEnd, match.index);
            lastEnd = imagePattern.lastIndex;
        }
        resultString += inputString.substring(lastEnd);
        return resultString;
    }

    createCaseComments(caseComments) {
        this.showSpinner = true;
        insertCaseComments({
            caseComments: caseComments
        })
            .then(result => {
                this.showSpinner = false;
                console.log('CaseComments created');
                this.dispatchEvent(new RefreshEvent());
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    changeJiraBaseUrl(event) {
        this.jiraBaseUrl = event.detail.value;
        if (!this.linkWithExisting) {
            this.getJiraProjects();
            //this.getJiraPriorities();
        }
    }

    changeJiraProject(event) {
        this.jiraProjectSelected = event.detail.value;
        this.newJiraIssue.fields.project.key = this.jiraProjects[this.jiraProjectSelected].key;
        this.getJiraIssueTypes();
    }

    changeIssueTypes(event) {
        this.newJiraIssue.fields.issuetype.id = event.detail.value;
        this.getJiraAvailableFields();
    }

    changeJiraPriorities(event) {
        this.newJiraIssue.fields.priority.id = event.detail.value;
    }

    changeJiraCustomers(event) {
        this.newJiraIssue.fields.customfield_14511.id = event.detail.value;
    }

    changeJiraCountries(event) {
        this.newJiraIssue.fields.customfield_14510.id = event.detail.value;
    }

    changeJiraFoundDuring(event) {
        this.newJiraIssue.fields.customfield_10601.id = event.detail.value;
    }

    changeJiraEnvironmentType(event) {
        this.newJiraIssue.fields.customfield_10605.id = event.detail.value;
    }

    handleJiraIssueKeyChange(event) {
        this.jiraIssueKey = (event.target.value).replace(/\s/g, '');
    }

    handleSummaryChange(event) {
        this.newJiraIssue.fields.summary = event.target.value;
    }

    handleDescriptionChange(event) {
        this.newJiraIssue.fields.description = event.target.value;
    }

    newJiraCommentChange(event) {
        this.newJiraComment.body = event.target.value;
    }

    changePSAProject(event) {
        this.newJiraIssue.fields.customfield_16646 = event.target.value;
    }

    handleTypeJiraLinkChange(event) {
        if (event.detail.value === '1') {
            this.linkWithExisting = true;
        } else {
            this.getJiraProjects();
            //this.getJiraPriorities();
            this.linkWithExisting = false;
        }
    }

    handleUploadFinished(event) {
        // Get the list of uploaded files
        const uploadedFiles = event.detail.files;
        var documentId = uploadedFiles[0].documentId;
        var message = "";
        if (uploadedFiles.length == 1) message = uploadedFiles.length + " file was added to case";
        else if (uploadedFiles.length > 1) message = uploadedFiles.length + " files were added to case";
        for (var i = 0; i < uploadedFiles.length; i++) {
            this.createJiraAttachments(this.currentJiraLink.jira_base_url__c, this.currentJiraLink.jira_key__c, uploadedFiles[i].documentId);
        }
    }

    handleLookupChange(event) {
        event.detail.value = (event.detail.length > 0) ? event.detail : [null];
        this.csm_user = event.detail.value[0];
    }

    handleSearch(event) {
        const target = event.target;
        searchUsers({ searchTerm: event.detail.searchTerm })
            .then(results => {
                target.setSearchResults(results);
            })
            .catch(error => {
                console.log(error);
            });
    }


    handleLookupAssignableUsersChange(event) {
        event.detail.value = (event.detail.length > 0) ? event.detail : [null];
        if (event.detail.value[0] != null) {
            this.newJiraIssue.fields.assignee.name = event.detail.value[0];
        } else {
            this.newJiraIssue.fields.assignee.name = '';
        }
    }

    handleSearchAssignableUsers(event) {
        const target = event.target;
        const searchTerm = event.detail.searchTerm;
        const key = this.newJiraIssue.fields.project.key;
        console.log(this.jiraBaseUrl + '/rest/api/2/user/assignable/search?project=' + key + '&username=' + searchTerm);
        this.jiraAssignableUsers = [];
        this.showSpinner = true;
        getCalloutResponseContents({
            url: this.jiraBaseUrl + '/rest/api/2/user/assignable/search?project=' + key + '&username=' + searchTerm
        })
            .then(result => {
                if (result[0] == '200') {
                    const usersMatchingDisplayName = JSON.parse(result[1]);
                    const results = usersMatchingDisplayName.map(user => ({
                        icon: 'standard:user',
                        id: user.name,
                        subtitle: 'Assignable User',
                        title: user.displayName
                    }));
                    target.setSearchResults(results);
                } else {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'ERROR With JIRA Link Component',
                            message: JSON.parse(result[1]).errorMessages[0],
                            variant: 'error',
                        })
                    );
                }
                this.showSpinner = false;
            })
            .catch(error => {
                console.log(error);
                this.showSpinner = false;
            });
    }

    get jiraIssueURL() {
        if (this.currentJiraLink !== undefined)
            return this.currentJiraLink.jira_base_url__c + '/browse/' + this.currentJiraLink.jira_key__c;
    }

    get jiraEpicLink() {
        if (this.currentJiraLink !== undefined && this.currentJiraLink.Epic_Link__c !== undefined && this.currentJiraLink.Epic_Link__c !== '')
            return this.currentJiraLink.jira_base_url__c + '/browse/' + this.currentJiraLink.Epic_Link__c;
    }

    get jiraLinkHasSprint() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.Sprint__c !== undefined && this.currentJiraLink.Sprint__c !== '') ? true : false;
    }

    get jiraLinkHasCountry() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.country__c !== undefined && this.currentJiraLink.country__c !== '') ? true : false;
    }

    get jiraLinkHasCustomer() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.customer__c !== undefined && this.currentJiraLink.customer__c !== '') ? true : false;
    }

    get jiraLinkHasFixVersions() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.fixVersions__c !== undefined && this.currentJiraLink.fixVersions__c !== '') ? true : false;
    }

    get jiraLinkHasPSAProject() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.PSA_Project__c !== undefined && this.currentJiraLink.PSA_Project__c !== '') ? true : false;
    }

    get jiraLinkHasEpic() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.Epic_Link__c !== undefined && this.currentJiraLink.Epic_Link__c !== '' && this.currentJiraLink.Epic_Name__c !== undefined && this.currentJiraLink.Epic_Name__c !== '') ? true : false;
    }

    get jiraLinkHasDueDate() {
        return (this.currentJiraLink !== undefined && this.currentJiraLink.due_date__c !== undefined && this.currentJiraLink.due_date__c !== '') ? true : false;
    }

    get hasJiraLinks() {
        return this.jiraLinks.length > 0;
    }

    get hasJiraTransitions() {
        return this.jiraTransitions.length > 0;
    }

    get hasJiraComments() {
        return this.jiraComments.length > 0;
    }

    get hasJiraAttachments() {
        return this.jiraAttachments.length > 0;
    }
    handleActive(event) {
        this.currentJiraLink = this.getCurrentJiraLink(event.target.value);
    }

    getCurrentJiraLink(jiraLinkId) {
        for (let i = 0; i < this.jiraLinks.length; i++) {
            const jiraLink = this.jiraLinks[i];
            if (jiraLink.Id === jiraLinkId) {
                return jiraLink;
            }
        }
    }

    async getFields(value) {
        const fields = {};
        if (this.jiraBaseUrl !== undefined && this.jiraBaseUrl !== '')
            fields[JIRA_BASE_URL_FIELD.fieldApiName] = this.jiraBaseUrl;
        if (this.jiraIssueKey !== undefined && this.jiraIssueKey !== '')
            fields[JIRA_KEY_FIELD.fieldApiName] = this.jiraIssueKey;
        if (this.csm_user !== undefined && this.csm_user !== '')
            fields[CSM_USER_REPORTER_FIELD.fieldApiName] = this.csm_user;
        fields[CASE_FIELD.fieldApiName] = this.recordId;
        fields[SUMMARY_FIELD.fieldApiName] = JSON.parse(value).fields.summary;
        fields[DESCRIPTION_FIELD.fieldApiName] = JSON.parse(value).fields.description;
        fields[CREATED_DATE_FIELD.fieldApiName] = JSON.parse(value).fields.created;
        fields[UPDATED_DATE_FIELD.fieldApiName] = JSON.parse(value).fields.updated;
        fields[STATUS_FIELD.fieldApiName] = JSON.parse(value).fields.status.name;
        fields[ISSUE_TYPE_FIELD.fieldApiName] = JSON.parse(value).fields.issuetype.name;
        fields[REPORTER_FIELD.fieldApiName] = JSON.parse(value).fields.reporter.displayName;
        if (JSON.parse(value).fields.assignee != null) fields[ASSIGNEE_FIELD.fieldApiName] = JSON.parse(value).fields.assignee.displayName;
        else fields[ASSIGNEE_FIELD.fieldApiName] = 'Unassigned';

        let fixVersions = ''
        var fixVersionArray = JSON.parse(value).fields.fixVersions;
        if (fixVersionArray != undefined) {
            for (var i in fixVersionArray)
                fixVersions += fixVersionArray[i].name + ';';
            fixVersions = fixVersions.substring(0, fixVersions.length - 1);
        }
        fields[FIXVERSIONS_FIELD.fieldApiName] = fixVersions;
        if (JSON.parse(value).fields.customfield_14511 != null) {
            fields[CUSTOMER_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_14511.value;
        } else {
            fields[CUSTOMER_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_14510 != null) {
            fields[COUNTRY_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_14510.value;
        } else {
            fields[COUNTRY_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_16646 != null) {
            fields[PSA_PROJECT_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_16646;
        } else {
            fields[PSA_PROJECT_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_11240 != null) {
            fields[EPIC_NAME_FIELD.fieldApiName] = ''
            fields[EPIC_LINK_FIELD.fieldApiName] = ''
            const selfUrl = JSON.parse(value).self;
            const baseUrlRegex = /^(https?:\/\/[^/]+)/;
            const matches = baseUrlRegex.exec(selfUrl);
            if (matches && matches.length > 1) {
                const baseurl = matches[1];
                const epicLinkKey = JSON.parse(value).fields.customfield_11240;
                const resp = await this.getJiraIssue(baseurl, epicLinkKey);
                if (resp && JSON.parse(resp).fields && JSON.parse(resp).fields.customfield_11241 !== null) {
                    const epicName = JSON.parse(resp).fields.customfield_11241;
                    fields[EPIC_LINK_FIELD.fieldApiName] = epicLinkKey;
                    fields[EPIC_NAME_FIELD.fieldApiName] = epicName;
                }
            }
        } else {
            fields[EPIC_LINK_FIELD.fieldApiName] = ''
            fields[EPIC_NAME_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_14449 != null) {
            fields[DUE_DATE_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_14449;
        } else {
            fields[DUE_DATE_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_10340 != null) {
            const sprintName = JSON.parse(value).fields.customfield_10340[0].split(',')[3].split('=')[1];
            fields[SPRINT_FIELD.fieldApiName] = sprintName;
        } else {
            fields[SPRINT_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_10601 != null) {
            fields[FOUND_DURING_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_10601.value;
        } else {
            fields[FOUND_DURING_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.customfield_10605 != null) {
            fields[ENVIRONMENT_TYPE_FIELD.fieldApiName] = JSON.parse(value).fields.customfield_10605.value;
        } else {
            fields[ENVIRONMENT_TYPE_FIELD.fieldApiName] = '';
        }

        if (JSON.parse(value).fields.priority != null) {
            fields[PRIORITY_FIELD.fieldApiName] = JSON.parse(value).fields.priority.name;
        } else {
            fields[PRIORITY_FIELD.fieldApiName] = '';
        }
        if (JSON.parse(value).fields.assignee != null) fields[ASSIGNEE_FIELD.fieldApiName] = JSON.parse(value).fields.assignee.displayName;
        else fields[ASSIGNEE_FIELD.fieldApiName] = 'Unassigned';


        const changelog = JSON.parse(value).changelog;
        if (changelog != undefined) {
            var histories = changelog.histories;
            var items = [];
            if (histories != undefined) {
                for (var i = 0; i < histories.length; i++) {
                    items.push(histories[i].items);
                }
                for (var i = 0; i < items.length; i++) {
                    if (items[i][0].field === 'Sprint') {
                        fields[SPRINT_TIME_STAMP_FIELD.fieldApiName] = histories[i].created;
                    }
                }
            }
        }

        return fields;
    }
    /*
        handleJiraAttachmentClick(event) {
            event.preventDefault();
            const dataUrl = event.target.dataset.url;
            const filename = event.target.dataset.filename;
            const mimetype = event.target.dataset.mimetype;
            console.log('data-url:', dataUrl);
    
            getAttachmentCalloutResponseContents({
                url: dataUrl
            })
                .then(result => {
                    const blob = new Blob([new Uint8Array(result)], { type: mimetype });
                    const blobUrl = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = blobUrl;
                    link.download = filename;
                    link.click();
                    setTimeout(() => {
                        URL.revokeObjectURL(blobUrl);
                    }, 100);
                })
                .catch(error => {
                    console.log(error);
                    this.showSpinner = false;
                });
        }
    */
    escape(str) {
        return str
            .replace(/[\\]/g, '\\\\')
            .replace(/[\"]/g, "\\\"")
            .replace(/[\/]/g, '\\/')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
    }

    eliminateInvalidCharacter(str) {
        return str
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/\t/g, "\\t")
            .replace(/\f/g, "\\f");
    }

    escapeHtml(str) {
        return str.replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
    }

    replaceLineBreaksWithParagraphs(str) {
        return '<p>' + str.replace(/\r\n/g, '</p><p>') + '</p>';
    }

}
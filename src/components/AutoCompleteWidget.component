<apex:component >
  <!-- Component uses JQuery to render autocomplete widgets -->   
    <apex:includeScript value="{!URLFOR($Resource.JQueryUI, 'jqueryUI/js/jquery-1.4.2.min.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.JQueryUI, 'jqueryUI/js/jquery-ui-1.8.6.custom.min.js')}"/> 
    <apex:stylesheet value="{!URLFOR($Resource.JQueryUI, 'jqueryUI/css/ui-lightness/jquery-ui-1.8.6.custom.css')}"/>
        
    <style>
    .ui-button { margin-left: -1px; }  
    </style>
    <script>
    var browserName=navigator.appName;
    if (browserName=="Microsoft Internet Explorer") {
        var browserVer; 
        var ua = navigator.userAgent;
        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null)
            browserVer = parseFloat(RegExp.$1);
        if(browserVer == 8) {
            //load ie friendly stylesheet
            document.write('<style>.ui-button-icon-only .ui-button-text { padding: 0.42em 0 0.12em; } ' + '\n' +
            '.ui-autocomplete-input { margin: 0; padding: 0.42em 0 0.12em 0.12em; width:250px;  }</style>');
        } else {
            //load ie friendly stylesheet
            document.write('<style>.ui-button-icon-only .ui-button-text { padding: 0.1em; } ' + '\n' +
            '.ui-autocomplete-input { margin: 0; padding: 0.42em 0 0.12em 0.12em; width:250px;  }</style>');
        }
    }else {
        document.write('<style>.ui-button-icon-only .ui-button-text { padding: 0.15em;  }' + '\n' +  
        '.ui-autocomplete-input { margin: 0; padding: 0.18em 0 0.17em 0.15em; width:250px; }</style>');
    }
    </script>
    
    
    <script>
    (function( $ ) {
        $.widget( "ui.combobox", {
            _create: function() {
                var self = this,
                    select = this.element.hide(),
                    selected = select.children( ":selected" ),
                    value = selected.val() ? selected.text() : "";
                var input = $( "<input>" )
                    .insertAfter( select )
                    .val( value )
                    .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: function( request, response ) {
                            var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
                            response( select.children( "option" ).map(function() {
                                var text = $( this ).text();
                                if ( this.value && ( !request.term || matcher.test(text) ) )
                                    return {
                                        label: text.replace(
                                            new RegExp(
                                                "(?![^&;]+;)(?!<[^<>]*)(" +
                                                $.ui.autocomplete.escapeRegex(request.term) +
                                                ")(?![^<>]*>)(?![^&;]+;)", "gi"
                                            ), "<strong>$1</strong>" ),
                                        value: text,
                                        option: this
                                    };
                            }) );
                        },
                        select: function( event, ui ) {                            
                            ui.item.option.selected = true;
                            self._trigger( "selected", event, {
                                item: ui.item.option
                            });
                        },
                        change: function( event, ui ) {
                            if ( !ui.item ) {                                
                                var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
                                    valid = false;
                                select.children( "option" ).each(function() {
                                    if ( this.value.match( matcher ) ) {
                                        this.selected = valid = true;
                                        return false;
                                    }
                                });
                                if ( !valid ) {
                                    // remove invalid value, as it didn't match anything
                                    $( this ).val( "" );
                                    select.val( "" );
                                    return false;
                                }
                            }
                        }
                    })
                    .addClass( "ui-widget ui-widget-content ui-corner-left" );

                input.data( "autocomplete" )._renderItem = function( ul, item ) {
                    return $( "<li></li>" )
                        .data( "item.autocomplete", item )
                        .append( "<a>" + item.label + "</a>" )
                        .appendTo( ul );
                };

                $( "<button type='button'>&nbsp;</button>" )
                    .attr( "tabIndex", -1 )
                    .attr( "title", "Show All Items" )
                    .insertAfter( input )
                    .button({
                        icons: {
                            primary: "ui-icon-triangle-1-s"
                        },
                        text: false
                    })
                    .removeClass( "ui-corner-all" )
                    .addClass( "ui-corner-right ui-button-icon" )
                    .click(function() {
                        // close if already visible
                        if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
                            input.autocomplete( "close" );
                            return;
                        }
                        // pass empty string as value to search for, displaying all results
                        input.autocomplete( "search", "" );
                        input.focus();
                    });
            }
        });
    })( jQuery );
    </script>
</apex:component>
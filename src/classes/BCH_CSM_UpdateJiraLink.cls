global class BCH_CSM_UpdateJiraLink implements Database.Batchable<sObject>,Database.AllowsCallouts {
    global Database.QueryLocator start(Database.BatchableContext bc){
        String query='select Id, assignee__c, case_recordId__c, description__c, issue_type__c, jira_base_url__c, jira_key__c, priority__c, reporter__c, sprint__c, sprint_Time_Stamp__c, status__c, summary__c, fixVersions__c, PSA_Project__c, due_date__c, customer__c, country__c, Jira_Created_Date__c, Jira_Updated_Date__c, Found_During__c, Environment_Type__c, Epic_Link__c, Epic_Name__c from CSM_QI_JiraLink__c where case_recordId__c != null and case_recordId__r.status not in (\'Abandoned\') and (case_recordId__r.ClosedDate=null or case_recordId__r.ClosedDate = LAST_N_MONTHS:6) order by case_recordId__r.LastModifiedDate desc LIMIT 50000';
        return Database.getQueryLocator(query);
    }
    @SuppressWarnings('PMD.AvoidDebugStatements')
    global void execute(Database.BatchableContext bc, List<CSM_QI_JiraLink__c> jls){
        Map<Id,CSM_QI_JiraLink__c> JiraLinkMap = new Map<Id,CSM_QI_JiraLink__c>();
        Map<String,CSM_QI_JiraLinkComment__c> JiraLinkCommentMap = new Map<String,CSM_QI_JiraLinkComment__c>();
        Integer jiraDescriptionFieldLength = Schema.SObjectType.CSM_QI_JiraLink__c.fields.description__c.getLength();
        Integer commentBodyFieldLength = Schema.SObjectType.CSM_QI_JiraLinkComment__c.fields.Body__c.getLength();
        List<CSM_QI_JiraLink__c> updateJls=new List<CSM_QI_JiraLink__c>();
        List<CSM_QI_JiraLinkComment__c> jlclToUpdate = new List<CSM_QI_JiraLinkComment__c>();
        List<FeedItem> caseCommentToInsert = new List<FeedItem>();
        List<User> users = new List<User>();
        Map<Id, String> caseIdToSprintsMap = new Map<Id, String>();
        users = [select Id from User where Name = 'Jira Service User' LIMIT 1];
        for(CSM_QI_JiraLink__c jl : jls) {
            JiraLinkMap.put(jl.Id, jl);
            String url = jl.jira_base_url__c + CON_JIRA.ISSUE_ENDPOINT+jl.jira_key__c + '?expand=changelog';
            try{
                HttpResponse res = SRV_CSM_JiraCallouts.makeGetCallout(url);
                if (res.getStatusCode()==200) {
                    Map<String, Object> m = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                    Map<String, Object> fields = (Map<String, Object>)m.get('fields');
                    Map<String, Object> changelog = (Map<String, Object>)m.get('changelog');
                    if(jl.summary__c != fields.get('summary')) { jl.summary__c = (String)fields.get('summary');}
                    if(jl.description__c != fields.get('description')) { 
                        if(((String)fields.get('description')).length() < jiraDescriptionFieldLength){
                            jl.description__c = (String)fields.get('description');
                        } else {
                            jl.description__c = ((String)fields.get('description')).substring(0, jiraDescriptionFieldLength-1);
                        }
                    }
                    if(jl.Jira_Created_Date__c != fields.get('created')) { jl.Jira_Created_Date__c = (Datetime) JSON.deserialize('"' + (String)fields.get('created') + '"', Datetime.class);}
                    if(jl.Jira_Updated_Date__c != fields.get('updated')) { jl.Jira_Updated_Date__c = (Datetime) JSON.deserialize('"' + (String)fields.get('updated') + '"', Datetime.class);}

                    Map<String, Object> issuetype = (Map<String, Object>)fields.get('issuetype');
                    if(jl.issue_type__c != issuetype.get('name')) { jl.issue_type__c = (String)issuetype.get('name');}

                    Map<String, Object> status = (Map<String, Object>)fields.get('status');
                    if(jl.status__c != status.get('name')) {
                        jl.status__c = (String)status.get('name');
                        try {
                            FeedItem caseComment = new FeedItem();
                            caseComment.ParentId = jl.case_recordId__c;
                            caseComment.IsRichText = true;
                            caseComment.Body = '<p>JIRA <a href="' + jl.jira_base_url__c + '/browse/' + jl.jira_key__c + '" target="_blank">' + jl.jira_key__c + '</a> status was updated with the value <b>' + jl.status__c + '</b>.</p>';
                            //caseComment.Body += '<p>&nbsp;</p><p><i>This message has been generated by the generic Jira Service User, please do not reply to this comment as the mailbox isn\'t hanlde.</i></p><p><i>If you want to communicate with Jira user please use the Jira component in the right panel.</i></p>';
                            if(users != null && !users.isEmpty()) {
                                caseComment.CreatedById = users[0].Id;
                            }
                            caseCommentToInsert.add(caseComment);
                        } catch(DmlException e) {
                            System.debug('The following exception has occurred to insert case comment: ' + e.getMessage());
                        }
                    }

                    Map<String, Object> priority = (Map<String, Object>)fields.get('priority');
                    if (priority != null) {
                        if (jl.priority__c != priority.get('name')) {
                            jl.priority__c = (String)priority.get('name');
                        }
                    }

                    Map<String, Object> reporter = (Map<String, Object>)fields.get('reporter');
                    if(jl.reporter__c != reporter.get('displayName')) {
                        jl.reporter__c = (String)reporter.get('displayName');
                    }

                    Map<String, Object> assignee = (Map<String, Object>)fields.get('assignee');
                    if(assignee != null) {
                        if(jl.assignee__c != assignee.get('displayName')) {
                            jl.assignee__c = (String)assignee.get('displayName');
                        }
                    }

                    List<Map<String, Object> > fixVersions = new List<Map<String, Object> >();
                    List<Object> listFixVersions = (List<Object>)fields.get('fixVersions');
                    if (listFixVersions != null) {
                        for (Object instance : listFixVersions) {
                            fixVersions.add((Map<String, Object>)instance);
                        }
                        String fixVersion='';
                        for (Integer i = 0; i < fixVersions.size(); i++) {
                            fixVersion+=fixVersions.get(i).get('name')+';';
                        }
                        if (fixVersion.length()>0) {
                            jl.fixVersions__c = fixVersion.substring(0, fixVersion.length() - 1);
                        }
                    }

                    if(fields.get('customfield_10340') != null) {
                        List<Object> listSprints = (List<Object>)fields.get('customfield_10340');
                        String sprint = ((String)listSprints[0]).split(',')[3].split('=')[1];
                        if(jl.sprint__c != sprint) {
                            jl.sprint__c = sprint;
                        }
                        String sprintFormatted = sprint + ' (' + jl.jira_key__c + ')';
                        if (!caseIdToSprintsMap.containsKey(jl.case_recordId__c)) {
                            caseIdToSprintsMap.put(jl.case_recordId__c, sprintFormatted);
                        } else {
                            String existingSprints = caseIdToSprintsMap.get(jl.case_recordId__c);
                            if (!existingSprints.endsWith(';')) {
                                existingSprints += '; ';
                            }
                            existingSprints += sprintFormatted;
                            caseIdToSprintsMap.put(jl.case_recordId__c, existingSprints);
                        }
                    }

                    if (fields.get('customfield_16646') != null) {
                        if(jl.PSA_Project__c != fields.get('customfield_16646')) {
                            jl.PSA_Project__c = (String)fields.get('customfield_16646');
                        }
                    }

                    if (fields.get('customfield_11240') != null && jl.Epic_Link__c != fields.get('customfield_11240')) {
                        jl.Epic_Link__c = (String) fields.get('customfield_11240');
                        String epicDetailsUrl = jl.jira_base_url__c + CON_JIRA.ISSUE_ENDPOINT + jl.Epic_Link__c;
                        try {
                            HttpResponse epicDetailsResponse = SRV_CSM_JiraCallouts.makeGetCallout(epicDetailsUrl);
                            if (epicDetailsResponse.getStatusCode() == 200) {
                                Map<String, Object> epicDetails = (Map<String, Object>) JSON.deserializeUntyped(epicDetailsResponse.getBody());
                                Map<String, Object> epicFields = (Map<String, Object>) epicDetails.get('fields');
                                
                                if (epicFields.get('customfield_11241') != null) {
                                    jl.Epic_Name__c = (String) epicFields.get('customfield_11241');
                                }
                            }   
                        } catch(System.CalloutException e) {
                            System.debug('Error making Jira callout: ' + e.getMessage());
                        }
                    } else {
                        jl.Epic_Link__c = '';
                        jl.Epic_Name__c = '';
                    }

                    if (fields.get('customfield_14449') != null) {
                        if(jl.due_date__c != date.valueOf((String)fields.get('customfield_14449'))) {
                            jl.due_date__c = date.valueOf((String)fields.get('customfield_14449'));
                        }
                    }

                    if (fields.get('customfield_14510') != null) {
                        if(jl.country__c != fields.get('customfield_14510')) {
                            Map<String, Object> country = (Map<String, Object>)fields.get('customfield_14510');
                            jl.country__c = (String)country.get('value');
                        }
                    }
                    if (fields.get('customfield_14511') != null) {
                        if(jl.customer__c != fields.get('customfield_14511')) {
                            Map<String, Object> customer = (Map<String, Object>)fields.get('customfield_14511');
                            jl.customer__c = (String)customer.get('value');
                        }
                    }
                    if (fields.get('customfield_10601') != null) {
                        if(jl.Found_During__c != fields.get('customfield_10601')) {
                            Map<String, Object> foundDuring = (Map<String, Object>)fields.get('customfield_10601');
                            jl.Found_During__c = (String)foundDuring.get('value');
                        }
                    }
                    if (fields.get('customfield_10605') != null) {
                        if(jl.Environment_Type__c != fields.get('customfield_10605')) {
                            Map<String, Object> environmentType = (Map<String, Object>)fields.get('customfield_10605');
                            jl.Environment_Type__c = (String)environmentType.get('value');
                        }
                    }

                    String sprintTimeStamp = '';
                    List<Map<String, Object> > histories = new List<Map<String, Object> >();
                    List<Map<String, Object> > items = new List<Map<String, Object> >();
                    if (changelog != null) {
                        List<Object> listHistories = (List<Object>)changelog.get('histories');
                        List<Object> listItems = new List<Object>();
                        if (listHistories != null) {
                            for (Object instance : listHistories) {
                                histories.add((Map<String, Object>)instance);
                            }
                            for (Integer i = 0; i < histories.size(); i++) {
                                List<Object> item = (List<Object>)histories.get(i).get('items');
                                listItems.add(item.get(0));
                            }
                        }
                        if (listItems != null && listItems.size() > 0) {
                            for (Object instance : listItems) {
                                items.add((Map<String, Object>)instance);
                            }
                        }
                        for (Integer i = 0; i < items.size(); i++) {
                            if(items.get(i).get('field') == 'Sprint') {
                                sprintTimeStamp = (String)histories.get(i).get('created');
                            }
                        }
                    }
                    if (sprintTimeStamp != '') {
                        jl.Sprint_Time_Stamp__c = (DateTime)JSON.deserialize('"' + sprintTimeStamp + '"', DateTime.class);
                    }

                    try{
                        updateJls.add(jl);
                    }catch(DmlException e) {
                        System.debug('The following exception has occurred to update jiraLink: ' + e.getMessage());
                    }
                }else{
                    System.debug(jl.jira_base_url__c + ' error');
                }
            }catch(System.CalloutException e) {
                System.debug('ERROR:' + e);
            }
        }

        if (!JiraLinkMap.isEmpty()) {
            List<CSM_QI_JiraLinkComment__c> jlcl = [select Id, JiraCommentId__c, JiraLink__c, Source__c from CSM_QI_JiraLinkComment__c where JiraLink__c in: JiraLinkMap.keySet()];
            for (CSM_QI_JiraLinkComment__c jlc : jlcl) {
                JiraLinkCommentMap.put(jlc.JiraLink__c + '~' + jlc.JiraCommentId__c, jlc);
            }
            for (Id jlId : JiraLinkMap.keySet()) {
                CSM_QI_JiraLink__c jl = JiraLinkMap.get(jlId);
                String url = jl.jira_base_url__c + CON_JIRA.ISSUE_ENDPOINT+jl.jira_key__c;
                try {
                    HttpResponse res2 = SRV_CSM_JiraCallouts.makeGetCallout(url + '/comment');
                    if (res2.getStatusCode()==200) {
                        Map<String, Object> m2 = (Map<String, Object>) JSON.deserializeUntyped(res2.getBody());
                        List<Map<String, Object> > jiraComments = new List<Map<String, Object> >();
                        for (Object jiraComment : (List<Object>)m2.get('comments')) {
                            jiraComments.add((Map<String, Object>)jiraComment);
                        }
                        for (Map<String, Object> comment : jiraComments) {
                            String jiraCommentId = (String)comment.get('id');
                            CSM_QI_JiraLinkComment__c jlc = new CSM_QI_JiraLinkComment__c();
                            if (JiraLinkCommentMap.containsKey(jl.Id + '~' +jiraCommentId)) {
                                jlc = JiraLinkCommentMap.get(jl.Id + '~' +jiraCommentId);
                            }
                            jlc.Body__c = '';
                            String commentBody = (String)comment.get('body'); 
                            String imagePattern = '<img[^>]+src="data:image/[^;]+;base64,[^"]+"[^>]*>';
                            Pattern pattern = Pattern.compile(imagePattern);
                            Matcher matcher = pattern.matcher(commentBody);
                            Integer lastEnd = 0;
                            while (matcher.find()) {
                                jlc.Body__c += commentBody.substring(lastEnd, matcher.start());
                                lastEnd = matcher.end();
                            }
                            jlc.Body__c += commentBody.substring(lastEnd);
                            if(jlc.Body__c.length() > commentBodyFieldLength){
                                jlc.Body__c = jlc.Body__c.substring(0, commentBodyFieldLength-1);
                            }
                            jlc.Body__c = jlc.Body__c.replaceAll('<', '&lt;').replaceAll('>', '&gt;');
                            jlc.Body__c = '<p>' + jlc.Body__c.replaceAll('\\r\\n', '</p><p>') + '</p>';
                            if (comment.get('visibility') != null) {
                                jlc.Restricted__c = true;
                            } else {
                                jlc.Restricted__c = false;
                            }
                            jlc.JiraCommentId__c = (String)comment.get('id');
                            jlc.JiraCommentCreatedDate__c = (Datetime) JSON.deserialize('"' + (String)comment.get('created') + '"', Datetime.class);
                            jlc.JiraCommentUpdatedDate__c = (Datetime) JSON.deserialize('"' + (String)comment.get('updated') + '"', Datetime.class);
                            jlc.JiraLink__c = jl.Id;
                            Map<String, Object> author = (Map<String, Object>)comment.get('author');
                            if (jlc.Source__c != 'CSM') {
                                jlc.Author__c = (String)author.get('displayName');
                                jlc.Source__c = 'JIRA';
                            }
                            Map<String, Object> updateAuthor = (Map<String, Object>)comment.get('updateAuthor');
                            jlc.UpdateAuthor__c = (String)updateAuthor.get('displayName');
                            jlclToUpdate.add(jlc);
                        }
                    }
                } catch (System.CalloutException e) {
                    System.debug('ERROR:' + e);
                }
            }
        }
        insert caseCommentToInsert;
        update updateJls;

        Map<Id, Case> caseMap = new Map<Id, Case>(
            [SELECT Id, Sprint__c FROM Case WHERE Id IN :caseIdToSprintsMap.keySet()]
        );

        List<Case> casesToUpdate = new List<Case>();
        Pattern jiraPattern = Pattern.compile('\\([A-Za-z0-9]+-[A-Za-z0-9]+\\)');
        for (Id caseId : caseIdToSprintsMap.keySet()) {
            Case existingCase = caseMap.get(caseId);
            String currentSprints = existingCase != null ? existingCase.Sprint__c : null;
            List<String> nonKeySprints = new List<String>();

            if (currentSprints != null) {
                List<String> sprintList = currentSprints.split(';');
                for (String sprint : sprintList) {
                    if (!jiraPattern.matcher(sprint.trim()).find()) {
                        nonKeySprints.add(sprint.trim());
                    }
                }
            }
            List<String> newSprints = caseIdToSprintsMap.get(caseId).split(';');
            nonKeySprints.addAll(newSprints);

            Case caseToUpdate = new Case(Id = caseId);
            caseToUpdate.Sprint__c = String.join(nonKeySprints, ';');
            casesToUpdate.add(caseToUpdate);
        }

        if (!casesToUpdate.isEmpty()) {
            update casesToUpdate;
        }
    
        List<CSM_QI_JiraLinkComment__c> newJiraComments = new List<CSM_QI_JiraLinkComment__c>();
        List<Id> comId = new List<Id>();
        Database.UpsertResult[] upsertResults = Database.upsert(jlclToUpdate, false);
        for (Database.UpsertResult result : upsertResults) {
            if (result.isSuccess() && result.isCreated()) {
                comId.add(result.getId());
            }
        }
        if (comId.size() > 0 ){
            newJiraComments = [select JiraCommentCreatedDate__c, Body__c, Author__c, JiraLink__r.case_recordId__c, JiraLink__r.jira_key__c, JiraLink__r.jira_base_url__c from CSM_QI_JiraLinkComment__c where Restricted__c = false and Id IN : comId];
        }

        if (newJiraComments.size() > 0) {
            List<FeedItem> feeds = new List<FeedItem>();
            for (CSM_QI_JiraLinkComment__c comment : newJiraComments) {

                String body = '<p>JIRA comment <a href="' + comment.JiraLink__r.jira_base_url__c + '/browse/' + comment.JiraLink__r.jira_key__c + '" target="_blank">' + comment.JiraLink__r.jira_key__c + '</a>,  <b>' + comment.Author__c + '</b>: </p>';
                body += comment.Body__c;
                FeedItem feed = new FeedItem();
                feed.ParentId = comment.JiraLink__r.case_recordId__c;
                feed.Body = body;
                feed.IsRichText = true;
                feed.CreatedById = CON_CSM.S_JIRA_SERVICE_USER_ID;
                feed.CreatedDate = comment.JiraCommentCreatedDate__c;
                feeds.add(feed);
            }

            if(feeds.size() > 0) {
                insert feeds;
            }
        }

    }

    global void finish(Database.BatchableContext bc){

    }

}